name: Kotlin CI with Gradle, Build & Push OCI Image

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build-gradle:

    runs-on: ubuntu-latest

    steps:
      - name: Cancel Previous Runs
        uses: styfle/cancel-workflow-action@0.9.1
        with:
          access_token: ${{ github.token }}
      - uses: actions/checkout@v3
      - name: Set up JDK 17
        uses: actions/setup-java@v3.3.0
        with:
          java-version: '17'
          distribution: 'adopt'
          cache: gradle
      - name: Grant execute permission for gradlew
        run: chmod +x gradlew
        working-directory: ./kotlin
      - name: Build with Gradle
        run: ./gradlew build
        working-directory: ./kotlin
      - name: Publish Test Report
        uses: mikepenz/action-junit-report@v3
        if: always()
        with:
          report_paths: '**/build/test-results/test/TEST-*.xml'  

  build-push-image:
    name: Build OCI Image and push to AWS ECR
    runs-on: ubuntu-latest
    needs: build-gradle
    if: contains('refs/heads/main', github.ref)
    
    steps:
      - name: Cancel Previous Runs
        uses: styfle/cancel-workflow-action@0.9.1
        with:
          access_token: ${{ github.token }}

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          role-to-assume: ${{ secrets.AWS_ACCESS_ROLE_TO_ASSUME}}
          aws-region: eu-central-1
          role-skip-session-tagging: true
          mask-aws-account-id: true
          role-duration-seconds: 1200

      - name: Login to Amazon ECR
        id: aws-login-ecr
        uses: aws-actions/amazon-ecr-login@v1
        with:
          registries: ${{ secrets.AWS_ACCOUNT_ID }}

      - name: Check out code
        uses: actions/checkout@v3

      - name: Set Branch name
        id: branch-name
        run: |
          # Short name for current branch. For PRs, use target branch (base ref)
          GIT_BRANCH=${GITHUB_BASE_REF:-${GITHUB_REF#refs/heads/}}
          echo "GIT_BRANCH=$GIT_BRANCH" >> $GITHUB_ENV

      - name: Set Image Tags
        id: image-tags
        run: |
          echo ::set-output name=branch_commit_tag::${GIT_BRANCH}-${COMMIT}
          echo ::set-output name=branch_tag::${GIT_BRANCH}-latest
        env:
          COMMIT: ${{ github.sha }}

      - name: Set up JDK 17
        uses: actions/setup-java@v3.3.0
        with:
          java-version: '17'
          distribution: 'adopt'
          cache: gradle
      - name: Grant execute permission for gradlew
        run: chmod +x gradlew
        working-directory: ./kotlin

      - name: Build OCI with Gradle
        run: ./gradlew bootBuildImage --imageName $IMAGE_NAME
        working-directory: ./kotlin
        env:
          IMAGE_TAG_BRANCH_COMMIT: ${{ steps.image-tags.outputs.branch_commit_tag }}
          IMAGE_TAG_BRANCH: ${{ steps.image-tags.outputs.branch_tag }}
          AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
          ECR_REGISTRY: ${{ steps.aws-login-ecr.outputs.registry}}/reev-main-awseuc1-pp-ecr
          IMAGE_NAME:   ocpi-service

      - name: Push image to Amazon ECR
        run: |
          docker push $ECR_REGISTRY/$ECR_REPOSITORY --all-tags
        env:
          ECR_REGISTRY: ${{ steps.aws-login-ecr.outputs.registry}}/reev-main-awseuc1-pp-ecr
          ECR_REPOSITORY: ocpi-service

  build-push-image-dry-run:
    name: Build OCI Image (Dry Run)
    runs-on: ubuntu-latest
    needs: build-gradle
    if: github.event_name ==  'pull_request' # Dry Run only in PRs
    
    steps:
      - name: Check out code
        uses: actions/checkout@v3

      - name: Set Branch name
        id: branch-name
        run: |
          # Short name for current branch. For PRs, use target branch (base ref)
          GIT_BRANCH=${GITHUB_BASE_REF:-${GITHUB_REF#refs/heads/}}
          echo "GIT_BRANCH=$GIT_BRANCH" >> $GITHUB_ENV

      - name: Set Image Tags
        id: image-tags
        run: |
          echo ::set-output name=branch_commit_tag::${GIT_BRANCH}-${COMMIT}
          echo ::set-output name=branch_tag::${GIT_BRANCH}-latest
        env:
          COMMIT: ${{ github.sha }}

      - name: Set up JDK 17
        uses: actions/setup-java@v3.3.0
        with:
          java-version: '17'
          distribution: 'adopt'
          cache: gradle
      - name: Grant execute permission for gradlew
        run: chmod +x gradlew
        working-directory: ./kotlin

      - name: Build OCI with Gradle
        run: ./gradlew bootBuildImage --imageName $IMAGE_NAME
        working-directory: ./kotlin
        env:
          IMAGE_TAG_BRANCH_COMMIT: ${{ steps.image-tags.outputs.branch_commit_tag }}
          IMAGE_TAG_BRANCH: ${{ steps.image-tags.outputs.branch_tag }}
          AWS_ACCOUNT_ID: "123456"
          ECR_REGISTRY: "ecr.eu-central-1.amazonaws.com"
          IMAGE_NAME:   ocpi-service
          
      - name: Push image to Amazon ECR (Dry Run)
        run: echo "docker push $ECR_REGISTRY/$ECR_REPOSITORY --all-tags"